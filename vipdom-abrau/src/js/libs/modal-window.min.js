class PopupWindow {
  html = document.querySelector('html');
  arrOpenBtn = [];
  closeBtn = null;
  getAttr = null;
  popup = null;
  popupWindow = null;

  constructor(arrOpenBtn) {
    this.arrOpenBtn = arrOpenBtn;
  }

  handleOpen = () => {
    const arrBtn = this.arrOpenBtn;

    if (arrBtn.length === 0) return;

    arrBtn.forEach(btn => {
      btn.addEventListener('click', () => {
        this.getAttr = btn.getAttribute('data-open-popup');

        if (!this.getAttr && this.getAttr === null) return;

        this.popup = document.getElementById(this.getAttr);
        this.popupWindow = this.popup.querySelector('.js-popup-box');
        this.closeBtn = this.popup.querySelector('.js-popup-close');

        this.handleClose();

        this.open(this.popup);
      });
    });
  };

  handleClose = () => {
    if (this.closeBtn === null && this.popup === null && this.popupWindow == null) return false;

    this.closeBtn.addEventListener('click', () => {
      this.close(this.popup);
    });

    window.addEventListener('keydown', ev => {
      if (ev.key === 'Escape') this.close(this.popup);
    });

    this.popupWindow.addEventListener('click', ev => {
      ev._isClickWithInModal = true;
    });

    this.popup.addEventListener('click', ev => {
      if (ev._isClickWithInModal) return;
      this.close(this.popup);
    });
  };

  open = wrapper => {
    if (wrapper === null) return;

    this.html.classList.add(`mod-open`);
    wrapper.classList.add('open');
  };

  close = wrapper => {
    if (wrapper === null) return;

    this.html.classList.remove(`mod-open`);
    wrapper.classList.remove('open');
  };

  handleInit = () => {
    this.handleOpen();
  };

  init = () => {
    this.handleInit();
  };
}

document.addEventListener('DOMContentLoaded', () => {
  const openButton = document.querySelectorAll('.js-popup-open');

  const popupWindow = new PopupWindow(openButton);
  popupWindow.init();
});
