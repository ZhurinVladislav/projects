document.addEventListener('DOMContentLoaded', () => {
  // КАСТОМНЫЙ СЕЛЕКТОР
  class Select {
    selectArr;

    constructor(selectArr) {
      this.selectArr = selectArr;
    }

    // ОТКРЫТИЕ КОНТЕНТА В СЕЛЕКТОРЕ
    handleOpen() {
      selectArr.forEach(el => {
        const btn = el.querySelector('.js-select-btn');
        const content = el.querySelector('.js-select-list');

        btn.addEventListener('click', () => {
          if (content.style.maxHeight) {
            this.handleClose(content);
            btn.classList.remove('active');
          } else {
            this.handleClose(content);
            content.style.maxHeight = content.scrollHeight + 'px';
            btn.classList.add('active');
          }
        });
      });
    }

    // ДОБАВЛЕНИЕ ЗНАЧЕНИЯ ИЗ СПИСКА SELECT В INPUT И КНОПКУ ОТКРЫТИЯ
    handleAddInputText() {
      selectArr.forEach(select => {
        const btnText = select.querySelector('.js-select-btn-text');
        const itemArr = [...Array.from(select.querySelectorAll('.js-select-item'))];
        const input = select.querySelector('.js-input-select');

        itemArr.forEach(item => {
          item.addEventListener('click', () => {
            const itemText = item.textContent.trim();
            btnText.textContent = itemText;
            input.value = itemText;

            this.handleAllClose();
          });
        });
      });
    }

    handleAllClose() {
      this.selectArr.forEach(el => {
        const list = el.querySelector('.js-select-list');
        const btn = el.querySelector('.js-select-btn');

        if (btn.classList.contains('active')) {
          btn.classList.remove('active');
        }

        list.style.maxHeight = null;
        list.classList.add('overflow-hidden');
      });
    }

    handleAddInputValue() {
      selectArr.forEach(select => {
        const itemArr = [...Array.from(select.querySelectorAll('.js-select-item'))];
        const input = select.querySelector('.js-input-select');
        input.value = itemArr[0].textContent.trim();
      });
    }

    handleClose(content) {
      content.style.maxHeight = null;
      content.classList.remove('active');
    }

    init() {
      if (this.selectArr.length !== 0) {
        this.handleAllClose();
        this.handleAddInputValue();
        this.handleOpen();
        this.handleAddInputText();
      } else return;
    }
  }

  const selectArr = [...Array.from(document.querySelectorAll('.js-select'))];
  const select = new Select(selectArr);

  select.init();
});
