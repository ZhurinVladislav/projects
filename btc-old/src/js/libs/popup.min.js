class PopupWindow {
  constructor(buttons) {
    this.html = document.querySelector('html');
    this.buttons = buttons || [];
  }

  handleOpen() {
    if (this.buttons.length === 0) return;

    this.buttons.forEach(button => {
      button.addEventListener('click', () => {
        const popupId = button.getAttribute('data-open-popup');
        if (!popupId) return;

        this.popup = document.getElementById(popupId);
        if (!this.popup) return;

        this.popupWindow = this.popup.querySelector('.js-popup-box');
        this.closeBtn = this.popup.querySelector('.js-popup-close');

        this.addEventListeners();
        this.openPopup(this.popup);
      });
    });
  }

  addEventListeners() {
    if (!this.popup || !this.popupWindow || !this.closeBtn) return;

    // Закрытие по кнопке
    this.closeBtn.addEventListener('click', this.handleClose);

    // Закрытие по Escape
    this.escapeHandler = ev => {
      if (ev.key === 'Escape') this.closePopup(this.popup);
    };

    window.addEventListener('keydown', this.escapeHandler);

    // Закрытие по клику вне модального окна
    this.popupWindow.addEventListener('click', ev => {
      ev.stopPropagation();
    });

    this.popup.addEventListener('click', this.handleOverlayClick);
  }

  removeEventListeners() {
    if (this.closeBtn) {
      this.closeBtn.removeEventListener('click', this.handleClose);
    }

    window.removeEventListener('keydown', this.escapeHandler);

    if (this.popup) {
      this.popup.removeEventListener('click', this.handleOverlayClick);
    }
  }

  handleClose = () => {
    this.closePopup(this.popup);
  };

  handleOverlayClick = ev => {
    if (ev.target === this.popup) {
      this.closePopup(this.popup);
    }
  };

  openPopup(popup) {
    if (!popup) return;

    this.html.classList.add('mod-open');
    popup.classList.add('open');
  }

  openPopupSuccess(popupSuccess) {
    if (!popupSuccess) return;

    this.closeAllPopup();

    this.popup = popupSuccess;

    this.popupWindow = this.popup.querySelector('.js-popup-box');
    this.closeBtn = this.popup.querySelector('.js-popup-close');

    this.addEventListeners();
    this.openPopup(this.popup);
  }

  closePopup(popup) {
    if (!popup) return;

    this.html.classList.remove('mod-open');
    popup.classList.remove('open');
    this.removeEventListeners();
  }

  closeAllPopup() {
    const allPopup = document.querySelectorAll('.popup');

    if (!allPopup) return;

    allPopup.forEach(el => {
      if (el.classList.contains('open')) {
        el.classList.remove('open');
      }
      if (this.html.classList.contains('mod-open')) {
        this.html.classList.remove('mod-open');
      }
    });

    this.removeEventListeners();
  }

  init() {
    this.handleOpen();
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const openButtons = document.querySelectorAll('.js-popup-open');
  const popupWindow = new PopupWindow(openButtons);
  const popupSuccess = document.getElementById('popup-success');
  popupWindow.init();

  $(document).on('af_complete', (ev, res) => {
    if (popupSuccess) if (res.success) popupWindow.openPopupSuccess(popupSuccess);
  });
});
