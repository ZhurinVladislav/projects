/**
 * Класс для управления мобильным меню.
 * Пример использования:
 * const mobMenu = new MobMenu(document.documentElement, document.body, mobMenuBtn, mobMenuWrap);
 * mobMenu.init();
 */
class MobMenu {
  constructor(html, body, btnOpen, btnClose, menu, isInnerMenu = false) {
    if (!html || !body || !btnOpen || !btnClose || !menu) {
      throw new Error('Все DOM-элементы должны быть переданы в конструктор.');
    }

    this.html = html;
    this.body = body;
    this.btnOpen = btnOpen;
    this.btnClose = btnClose;
    this.menu = menu;
    this.overlay = this.menu.querySelector('.js-menu-overlay'); // <--- добавили overlay
    this.isMenuOpen = false;
    this.isInnerMenu = isInnerMenu;
  }

  /**
   * Обработчик клика по кнопке открытия/закрытия меню.
   */
  handleBtn = () => {
    this.btnOpen.addEventListener('click', () => {
      if (!this.isMenuOpen) this.open();
    });

    this.btnClose.addEventListener('click', () => {
      if (this.isMenuOpen) this.close();
    });
  };

  /**
   * Обработчик закрытия меню при нажатии клавиши ESC.
   */
  handleESC = () => {
    window.addEventListener('keydown', event => {
      if (event.key === 'Escape' && this.isMenuOpen) {
        this.close();
      }
    });
  };

  /**
   * Обработчик закрытия меню по клику на фон.
   */
  handleOverlayClick = () => {
    if (this.overlay) {
      this.overlay.addEventListener('click', () => {
        if (this.isMenuOpen) this.close();
      });
    }
  };

  /**
   * Открытие мобильного меню.
   */
  open = () => {
    this.isMenuOpen = true;
    this.html.classList.add('mod-open');
    this.menu.classList.add('active');
    this.body.classList.add('menu-open');
    this.html.classList.add('menu-open');
  };

  /**
   * Закрытие мобильного меню.
   */
  close = () => {
    this.isMenuOpen = false;
    this.html.classList.remove('mod-open');
    this.menu.classList.remove('active');
    this.body.classList.remove('menu-open');
    this.html.classList.remove('menu-open');
  };

  /**
   * Обработка вложенного меню.
   */
  toggleInnerMenu = () => {
    if (this.isInnerMenu) {
      const btn = this.menu.querySelectorAll('.js-mobile-list-btn');
      const list = this.menu.querySelectorAll('.js-mobile-list');

      if (!btn || !list) {
        throw new Error('Не найдены элементы внутреннего списка');
      }

      list.forEach(el => {
        el.classList.add('hidden');
        el.style.display = 'none';
      });

      btn.forEach(el => {
        el.addEventListener('click', () => {
          const listEl = el.nextElementSibling;
          el.classList.toggle('active');
          listEl.classList.toggle('hidden');
          listEl.style.display = listEl.classList.contains('hidden') ? 'none' : 'flex';
        });
      });

      list.forEach(el => {
        const activeChild = el.querySelector('.active');
        if (activeChild) {
          const parentList = el.closest('.js-mobile-list');
          const parentBtn = parentList?.previousElementSibling;

          parentBtn?.classList.add('active');
          parentList?.classList.remove('hidden');
          parentList.style.display = 'flex';

          activeChild.querySelector('.js-mobile-btn')?.classList.add('active');
          const childList = activeChild.querySelector('.js-mobile-list');
          if (childList) {
            childList.classList.remove('hidden');
            childList.style.display = 'flex';
          }
        }
      });
    }
  };

  /**
   * Инициализация обработчиков.
   */
  init = () => {
    if (this.html && this.body && this.btnOpen && this.btnClose && this.menu) {
      this.handleBtn();
      this.handleESC();
      this.handleOverlayClick(); // <--- добавили инициализацию обработчика фона
      this.toggleInnerMenu();
    } else {
      console.warn('Не все элементы найдены. MobMenu не инициализирован.');
    }
  };
}

export default MobMenu;
